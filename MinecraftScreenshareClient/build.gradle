plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.github.harbby.gradle.serviceloader" version "1.1.8"
}

group = 'org.BananasAmIRite'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT'
    compileClasspath group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1'
    implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '2.0.2'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.2'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2.2'


}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
//    configurations.compileClasspath.collect {zipTree(it)}
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
//    configurations.compileClasspath.collect {
//        println it
//        zipTree(it)
//    }
}

shadowJar {
//    dependencies {
//        include dependency(group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1')
//    }
    configurations = [project.configurations.compileClasspath]
}

serviceLoader {
    serviceInterface 'javax.websocket.ContainerProvider', 'javax.websocket.WebSocketContainer'
}
